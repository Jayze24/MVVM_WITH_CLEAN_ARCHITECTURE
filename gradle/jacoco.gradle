// 참고 : https://jkroh.tistory.com/19
apply plugin: 'jacoco'

jacoco {
    toolVersion = '0.8.9'
}

// flavor가 설정된 모듈의 경우, 적용된 flavor 명칭을 알아야한다
// 모듈의 build.gradle 파일에 설정된 flavor 값을 가져온다
String flavor = project.ext.has('pFlavor') ? project.ext.pFlavor : ''

// jacoco는 jutni test 결과를 기반으로 동작한다
// jacoco 리포트 생성 작업 이전에 unit test task가 완료되어야한다
String dependsOnTask = "test${flavor.capitalize()}DebugUnitTest"

// jacoco gradle task 추가
// jacocoReport 타입의 task이며,
// 위에서 알아낸 dependsOnTask를 종속 task로 설정한다
task generateCodeCoverageReports(type: JacocoReport, dependsOn: dependsOnTask) {
    group = "Reporting"
    description = "Generate Jaoco Coverage Reports"

    def reportDirPath = "$buildDir/reports/codeCoverage"

    reports {
        html.enabled true
        xml.enabled true

        html.destination file("$reportDirPath/${project.name}")
        xml.destination file("$reportDirPath/${project.name}.xml")
    }

    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            '**/*InjectAdapter*.*',
            '**/*StaticInjection*.*',
            '**/*ModuleAdapter*.*',
            // Dagger
            '**/*_Provide*/**',
            '**/*_Factory*/**',
            '**/*_MembersInjector.class',
            '**/*Dagger*'
    ]

    def javaClassDirPath = "$project.buildDir/intermediates/javac/debug/classes"
    def kotlinClassDirPath = "$project.buildDir/tmp/kotlin-classes/debug"
    def coverageExecutionDataPath = "${buildDir}/jacoco/testDebugUnitTest.exec"

    // flavor가 설정된 경우, 결과물의 경로가 변하기 때문에, 꼭 설정해줘야한다
    if (!flavor.isEmpty()) {
        javaClassDirPath = "$project.buildDir/intermediates/javac/${flavor}Debug/classes"
        kotlinClassDirPath = "$project.buildDir/tmp/kotlin-classes/${flavor}Debug"
        coverageExecutionDataPath = "${buildDir}/jacoco/test${flavor.capitalize()}DebugUnitTest.exec"
    }

    def mainJavaSrcPath = "$project.projectDir/src/main/java"
    def mainKotlinSrcPath = "$project.projectDir/src/main/kotlin"

    sourceDirectories.from = files([mainJavaSrcPath, mainKotlinSrcPath])
    classDirectories.from = fileTree(
            dir: javaClassDirPath,
            excludes: fileFilter
    ) + fileTree(
            dir: kotlinClassDirPath,
            excludes: fileFilter
    )
    executionData.from = file(coverageExecutionDataPath)
}

tasks.all { task ->
    if (task.name.equals(dependsOnTask)) {
        task.finalizedBy generateCodeCoverageReports
    }
}